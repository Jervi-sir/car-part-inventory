Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('full_name', 120)->nullable();
            $table->string('email')->unique();
            $table->date('birthdate')->nullable();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('password_plaintext')->nullable();
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name', 80)->unique();
            $table->timestamps();
        });

        Schema::create('manufacturers', function (Blueprint $table) {
            $table->id();
            $table->string('name', 120)->unique();
            $table->timestamps();
        });

        Schema::create('delivery_methods', function (Blueprint $table) {
            $table->smallIncrements('id');
            $table->string('code', 24)->unique();   // PICKUP|COURIER|POST
            $table->string('label', 64);
        });
        Schema::create('vehicle_brands', function (Blueprint $table) {
            $table->id();
            $table->string('name', 120)->unique();
            $table->timestamps();
        });

        Schema::create('vehicle_models', function (Blueprint $table) {
            $table->id();
            $table->foreignId('vehicle_brand_id')->constrained('vehicle_brands')->restrictOnDelete();
            $table->string('name', 120);
            $table->smallInteger('year_from')->nullable();
            $table->smallInteger('year_to')->nullable();
            $table->timestamps();

            $table->unique(['vehicle_brand_id', 'name', 'year_from', 'year_to']);
        });
        Schema::create('parts', function (Blueprint $table) {
            $table->id();
            $table->foreignId('category_id')->constrained('categories')->restrictOnDelete();
            $table->foreignId('manufacturer_id')->nullable()->constrained('manufacturers')->nullOnDelete();
            $table->string('sku', 80)->nullable();            // internal ref (optional)
            $table->string('name');                           // DÃ©signation
            $table->text('description')->nullable();
            $table->integer('package_qty')->default(1);
            $table->integer('min_order_qty')->default(1);
            $table->char('currency', 3)->default('DZD');
            $table->decimal('base_price', 12, 2)->nullable(); // optional baseline
            $table->boolean('is_active')->default(true);
            $table->timestamps();

            $table->index(['category_id', 'manufacturer_id']);
            $table->unique(['sku']); // allow null; unique per non-null
        });


        Schema::create('part_reference_types', function (Blueprint $table) {
            $table->smallIncrements('id');
            $table->string('code', 24)->unique(); // OEM, AFTERMARKET, SUPPLIER, EAN_UPC, OTHER
            $table->string('label', 64);
        });

        Schema::create('part_references', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->foreignId('part_reference_type_id')->constrained('part_reference_types')->cascadeOnDelete();
            $table->unsignedSmallInteger('ref_type_id');
            $table->string('reference_code', 120);
            $table->string('source_brand', 120)->nullable();
            $table->timestamps();

            $table->unique(['part_id', 'part_reference_type_id', 'reference_code']);
            $table->index('reference_code');
        });

        Schema::create('part_fitments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->foreignId('vehicle_model_id')->constrained('vehicle_models')->restrictOnDelete();
            $table->string('engine_code', 64)->nullable();
            $table->string('notes', 255)->nullable();
            $table->timestamps();

            $table->unique(['part_id', 'vehicle_model_id', 'engine_code']);
        });

        Schema::create('part_images', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->text('url');
            $table->smallInteger('sort_order')->default(0);
            $table->timestamps();
        });

        Schema::create('price_tiers', function (Blueprint $table) {
            $table->smallIncrements('id');
            $table->string('code', 24)->unique();  // RETAIL, DEMI_GROS, GROS, APPLIQUE
            $table->string('label', 64);
        });

        Schema::create('part_prices', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->foreignId('price_tier_id')->constrained('price_tiers')->cascadeOnDelete();
            $table->unsignedSmallInteger('tier_id');
            $table->integer('min_qty')->default(1);
            $table->decimal('price', 12, 2);
            $table->char('currency', 3)->default('DZD');
            $table->timestamps();

            $table->foreign('tier_id')->references('id')->on('price_tiers')->restrictOnDelete();
            $table->unique(['part_id', 'tier_id', 'min_qty']);
        });

        

        Schema::create('warehouses', function (Blueprint $table) {
            $table->id();
            $table->string('name', 120);
            $table->string('site_code', 32)->nullable();
            $table->string('location_text', 255)->nullable();
            $table->timestamps();
        });

        Schema::create('part_stock', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->foreignId('warehouse_id')->constrained('warehouses')->restrictOnDelete();
            $table->integer('qty_on_hand')->default(0);
            $table->integer('qty_reserved')->default(0);
            $table->timestamps();

            $table->unique(['part_id', 'warehouse_id']);
        });

        Schema::create('stock_movements', function (Blueprint $table) {
            $table->id();
            $table->foreignId('part_id')->constrained('parts')->cascadeOnDelete();
            $table->foreignId('warehouse_id')->constrained('warehouses')->restrictOnDelete();
            $table->string('movement_type', 20); // PURCHASE|SALE|RESERVATION|UNRESERVATION|ADJUSTMENT|TRANSFER
            $table->integer('qty_delta');
            $table->decimal('unit_cost', 12, 2)->nullable();
            $table->string('notes', 255)->nullable();
            $table->timestamps();

            $table->index(['part_id', 'created_at']);
        });
        Schema::create('order_statuses', function (Blueprint $table) {
            $table->smallIncrements('id');
            $table->string('code', 24)->unique();   // DRAFT|PLACED|CONFIRMED|PICKING|SHIPPED|CANCELLED
            $table->string('label', 64);
        });
        Schema::create('orders', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->restrictOnDelete();
            $table->unsignedSmallInteger('status_id');
            $table->unsignedSmallInteger('delivery_method_id')->nullable();
            $table->foreignId('warehouse_id')->nullable()->constrained('warehouses')->nullOnDelete();
            $table->string('ship_to_name', 120)->nullable();
            $table->string('ship_to_phone', 40)->nullable();
            $table->string('ship_to_address', 255)->nullable();
            $table->char('currency', 3)->default('DZD');
            $table->decimal('subtotal', 12, 2)->default(0);
            $table->decimal('discount_total', 12, 2)->default(0);
            $table->decimal('shipping_total', 12, 2)->default(0);
            $table->decimal('tax_total', 12, 2)->default(0);
            $table->decimal('grand_total', 12, 2)->default(0);
            $table->timestamps();

            $table->foreign('status_id')->references('id')->on('order_statuses')->restrictOnDelete();
            $table->foreign('delivery_method_id')->references('id')->on('delivery_methods')->restrictOnDelete();
        });

        Schema::create('order_items', function (Blueprint $table) {
            $table->id();
            $table->foreignId('order_id')->constrained('orders')->cascadeOnDelete();
            $table->foreignId('part_id')->constrained('parts')->restrictOnDelete();
            $table->integer('qty');
            $table->decimal('unit_price', 12, 2);
            $table->char('currency', 3)->default('DZD');
            $table->decimal('line_total', 12, 2);
            $table->string('notes', 255)->nullable();
            $table->timestamps();

            $table->unique(['order_id', 'part_id']);
            $table->index('part_id');
        });



this is parts crud 

```
// =============================================================================================================
// file: app/admin/parts/page.tsx
import * as React from "react";
import { useEffect, useMemo, useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { ChevronLeft, ChevronRight, Pencil, Trash, Plus } from "lucide-react";
import { AdminLayout } from "../layout/admin-layout";

type Id = number | string;
interface Category { id: Id; name: string }
interface Manufacturer { id: Id; name: string }
interface Part { 
  id: Id; 
  category_id: Id; 
  manufacturer_id: Id | null; 
  sku: string | null; 
  name: string; 
  description: string | null; 
  package_qty: number; 
  min_order_qty: number; 
  currency: string; 
  base_price: number | null; 
  is_active: boolean 
}
interface Page<T> { data: T[]; total: number; page: number; per_page: number }

const endpointCategories = "/api/categories";
const endpointManufacturers = "/api/manufacturers";
const endpointParts = "/api/parts";

export default function PartsPage() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [manufacturers, setManufacturers] = useState<Manufacturer[]>([]);
  const [pageData, setPageData] = useState<Page<Part>>({ data: [], total: 0, page: 1, per_page: 10 });
  const [search, setSearch] = useState("");
  const [categoryFilter, setCategoryFilter] = useState<string>("");
  const [manufacturerFilter, setManufacturerFilter] = useState<string>("");
  const [open, setOpen] = useState(false);
  const [editing, setEditing] = useState<Part | null>(null);

  const maxPage = useMemo(() => Math.max(1, Math.ceil(pageData.total / pageData.per_page)), [pageData]);

  const loadCategories = async () => {
    const res = await fetch(`${endpointCategories}?page=1&per_page=999`, { headers: { Accept: "application/json" } });
    const json = await res.json();
    setCategories(Array.isArray(json) ? json : json.data);
  };

  const loadManufacturers = async () => {
    const res = await fetch(`${endpointManufacturers}?page=1&per_page=999`, { headers: { Accept: "application/json" } });
    const json = await res.json();
    setManufacturers(Array.isArray(json) ? json : json.data);
  };

  const fetchData = async (page = 1) => {
    const params = new URLSearchParams({ page: String(page), per_page: String(pageData.per_page) });
    if (search) params.set("search", search);
    if (categoryFilter) params.set("category_id", categoryFilter);
    if (manufacturerFilter) params.set("manufacturer_id", manufacturerFilter);
    const res = await fetch(`${endpointParts}?${params.toString()}`, { headers: { Accept: "application/json" } });
    const json = await res.json();
    const normalized: Page<Part> = Array.isArray(json) ? { data: json, page, per_page: 10, total: json.length } : json;
    setPageData(normalized);
  };

  useEffect(() => { loadCategories(); loadManufacturers(); }, []);
  useEffect(() => { fetchData(1); }, [search, categoryFilter, manufacturerFilter]);

  const openCreate = () => { setEditing(null); setOpen(true); };
  const openEdit = (row: Part) => { setEditing(row); setOpen(true); };

  const save = async (payload: { 
    category_id: string; 
    manufacturer_id: string | undefined; 
    sku?: string; 
    name: string; 
    description?: string; 
    package_qty: string; 
    min_order_qty: string; 
    currency: string; 
    base_price?: string; 
    is_active: boolean 
  }) => {
    const body = JSON.stringify({
      category_id: parseInt(payload.category_id),
      manufacturer_id: payload.manufacturer_id ? parseInt(payload.manufacturer_id) : null,
      sku: payload.sku?.trim() || null,
      name: payload.name.trim(),
      description: payload.description?.trim() || null,
      package_qty: parseInt(payload.package_qty),
      min_order_qty: parseInt(payload.min_order_qty),
      currency: payload.currency.trim(),
      base_price: payload.base_price ? parseFloat(payload.base_price) : null,
      is_active: payload.is_active,
    });
    const headers = { "Content-Type": "application/json", Accept: "application/json" };
    if (!editing) await fetch(endpointParts, { method: "POST", headers, body });
    else await fetch(`${endpointParts}/${editing.id}`, { method: "PUT", headers, body });
    setOpen(false); await fetchData(pageData.page);
  };

  const remove = async (row: Part) => {
    if (!confirm(`Delete part "${row.name}"?`)) return;
    await fetch(`${endpointParts}/${row.id}`, { method: "DELETE", headers: { Accept: "application/json" } });
    await fetchData(pageData.page);
  };

  return (
    <AdminLayout>
      <div className="p-6 space-y-4">
        <div className="text-2xl font-semibold">Parts</div>
        <div className="flex items-center gap-2">
          <Input placeholder="Search parts..." value={search} onChange={(e) => setSearch(e.target.value)} className="w-64" />
          <select className="border rounded px-3 py-2 text-sm" value={categoryFilter} onChange={(e) => setCategoryFilter(e.target.value)}>
            <option value="">All categories</option>
            {categories.map((c) => (<option key={String(c.id)} value={String(c.id)}>{c.name}</option>))}
          </select>
          <select className="border rounded px-3 py-2 text-sm" value={manufacturerFilter} onChange={(e) => setManufacturerFilter(e.target.value)}>
            <option value="">All manufacturers</option>
            {manufacturers.map((m) => (<option key={String(m.id)} value={String(m.id)}>{m.name}</option>))}
          </select>
          <div className="flex-1" />
          <Button size="sm" onClick={openCreate}><Plus className="h-4 w-4 mr-1" />New Part</Button>
        </div>

        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[70px]">ID</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Manufacturer</TableHead>
                <TableHead>SKU</TableHead>
                <TableHead>Name</TableHead>
                <TableHead>Pkg Qty</TableHead>
                <TableHead>Min Qty</TableHead>
                <TableHead>Base Price</TableHead>
                <TableHead>Active</TableHead>
                <TableHead className="w-[120px]">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {pageData.data.length === 0 && (<TableRow><TableCell colSpan={10} className="text-center text-muted-foreground">No data</TableCell></TableRow>)}
              {pageData.data.map((row) => (
                <TableRow key={String(row.id)}>
                  <TableCell>{row.id}</TableCell>
                  <TableCell>{categories.find(c => String(c.id) === String(row.category_id))?.name || row.category_id}</TableCell>
                  <TableCell>{row.manufacturer_id ? manufacturers.find(m => String(m.id) === String(row.manufacturer_id))?.name || row.manufacturer_id : ""}</TableCell>
                  <TableCell>{row.sku ?? ""}</TableCell>
                  <TableCell>{row.name}</TableCell>
                  <TableCell>{row.package_qty}</TableCell>
                  <TableCell>{row.min_order_qty}</TableCell>
                  <TableCell>{row.base_price ? `${row.base_price} ${row.currency}` : ""}</TableCell>
                  <TableCell>{row.is_active ? "Yes" : "No"}</TableCell>
                  <TableCell className="flex gap-2">
                    <Button variant="outline" size="icon" onClick={() => openEdit(row)}><Pencil className="h-4 w-4" /></Button>
                    <Button variant="destructive" size="icon" onClick={() => remove(row)}><Trash className="h-4 w-4" /></Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>

        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            {pageData.total ? `${(pageData.page - 1) * pageData.per_page + 1}-${Math.min(pageData.total, pageData.page * pageData.per_page)} of ${pageData.total}` : "0"}
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="icon" onClick={() => fetchData(Math.max(1, pageData.page - 1))} disabled={pageData.page <= 1}><ChevronLeft className="h-4 w-4" /></Button>
            <div className="text-sm">Page {pageData.page} / {maxPage}</div>
            <Button variant="outline" size="icon" onClick={() => fetchData(Math.min(maxPage, pageData.page + 1))} disabled={pageData.page >= maxPage}><ChevronRight className="h-4 w-4" /></Button>
          </div>
        </div>

        <PartDialog open={open} onOpenChange={setOpen} categories={categories} manufacturers={manufacturers} initial={editing || undefined} onSave={save} />
      </div>
    </AdminLayout>
  );
}

function PartDialog({ open, onOpenChange, categories, manufacturers, initial, onSave }: { 
  open: boolean; 
  onOpenChange: (v: boolean) => void; 
  categories: Category[]; 
  manufacturers: Manufacturer[]; 
  initial?: Part; 
  onSave: (payload: { 
    category_id: string; 
    manufacturer_id: string | undefined; 
    sku?: string; 
    name: string; 
    description?: string; 
    package_qty: string; 
    min_order_qty: string; 
    currency: string; 
    base_price?: string; 
    is_active: boolean 
  }) => void | Promise<void> 
}) {
  const [categoryId, setCategoryId] = useState(String(initial?.category_id || ""));
  const [manufacturerId, setManufacturerId] = useState(initial?.manufacturer_id ? String(initial.manufacturer_id) : "none");
  const [sku, setSku] = useState(initial?.sku || "");
  const [name, setName] = useState(initial?.name || "");
  const [description, setDescription] = useState(initial?.description || "");
  const [packageQty, setPackageQty] = useState(String(initial?.package_qty ?? 1));
  const [minOrderQty, setMinOrderQty] = useState(String(initial?.min_order_qty ?? 1));
  const [currency, setCurrency] = useState(initial?.currency || "DZD");
  const [basePrice, setBasePrice] = useState(initial?.base_price ? String(initial.base_price) : "");
  const [isActive, setIsActive] = useState(initial?.is_active ?? true);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    setCategoryId(String(initial?.category_id || ""));
    setManufacturerId(initial?.manufacturer_id ? String(initial.manufacturer_id) : "none");
    setSku(initial?.sku || "");
    setName(initial?.name || "");
    setDescription(initial?.description || "");
    setPackageQty(String(initial?.package_qty ?? 1));
    setMinOrderQty(String(initial?.min_order_qty ?? 1));
    setCurrency(initial?.currency || "DZD");
    setBasePrice(initial?.base_price ? String(initial.base_price) : "");
    setIsActive(initial?.is_active ?? true);
  }, [initial]);

  const submit = async () => {
    if (!name.trim() || !categoryId) return;
    setSubmitting(true);
    await onSave({ 
      category_id: categoryId, 
      manufacturer_id: manufacturerId === "none" ? undefined : manufacturerId, 
      sku: sku || undefined, 
      name, 
      description: description || undefined, 
      package_qty: packageQty, 
      min_order_qty: minOrderQty, 
      currency, 
      base_price: basePrice || undefined, 
      is_active: isActive
    });
    setSubmitting(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader><DialogTitle>{initial ? "Edit Part" : "New Part"}</DialogTitle></DialogHeader>
        <div className="space-y-3">
          <div className="space-y-1">
            <label className="text-sm">Category</label>
            <Select value={categoryId} onValueChange={setCategoryId}>
              <SelectTrigger><SelectValue placeholder="Select a category" /></SelectTrigger>
              <SelectContent>
                {categories.map(c => (<SelectItem key={String(c.id)} value={String(c.id)}>{c.name}</SelectItem>))}
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-1">
            <label className="text-sm">Manufacturer (optional)</label>
            <Select value={manufacturerId} onValueChange={setManufacturerId}>
              <SelectTrigger><SelectValue placeholder="Select a manufacturer" /></SelectTrigger>
              <SelectContent>
                <SelectItem value="none">None</SelectItem>
                {manufacturers.map(m => (<SelectItem key={String(m.id)} value={String(m.id)}>{m.name}</SelectItem>))}
              </SelectContent>
            </Select>
          </div>
          <div className="space-y-1">
            <label className="text-sm">SKU (optional)</label>
            <Input value={sku} onChange={(e) => setSku(e.target.value)} placeholder="e.g. ABC-123" />
          </div>
          <div className="space-y-1">
            <label className="text-sm">Name</label>
            <Input value={name} onChange={(e) => setName(e.target.value)} placeholder="e.g. Brake Pad Set" />
          </div>
          <div className="space-y-1">
            <label className="text-sm">Description (optional)</label>
            <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder="Detailed description..." />
          </div>
          <div className="grid grid-cols-2 gap-3">
            <div className="space-y-1"><label className="text-sm">Package Qty</label><Input type="number" value={packageQty} onChange={(e) => setPackageQty(e.target.value)} min="1" /></div>
            <div className="space-y-1"><label className="text-sm">Min Order Qty</label><Input type="number" value={minOrderQty} onChange={(e) => setMinOrderQty(e.target.value)} min="1" /></div>
          </div>
          <div className="grid grid-cols-2 gap-3">
            <div className="space-y-1"><label className="text-sm">Currency</label><Input value={currency} onChange={(e) => setCurrency(e.target.value)} placeholder="DZD" maxLength={3} /></div>
            <div className="space-y-1"><label className="text-sm">Base Price (optional)</label><Input type="number" step="0.01" value={basePrice} onChange={(e) => setBasePrice(e.target.value)} placeholder="100.00" /></div>
          </div>
          <div className="flex items-center space-x-2">
            <Checkbox id="is_active" checked={isActive} onCheckedChange={(checked) => setIsActive(!!checked)} />
            <label htmlFor="is_active" className="text-sm">Active</label>
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
          <Button onClick={submit} disabled={submitting || !name.trim() || !categoryId}>Save</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
```
and these are the api i have 
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\Api\{CategoryController, ManufacturerController, PartsController, VehicleBrandController, VehicleModelController};

Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');

Route::prefix('categories')->group(function () {
    Route::get('/', [CategoryController::class, 'index']);
    Route::post('/', [CategoryController::class, 'store']);
    Route::put('{category}', [CategoryController::class, 'update']);
    Route::delete('{category}', [CategoryController::class, 'destroy']);
});

Route::prefix('manufacturers')->group(function () {
    Route::get('/', [ManufacturerController::class, 'index']);
    Route::post('/', [ManufacturerController::class, 'store']);
    Route::put('{manufacturer}', [ManufacturerController::class, 'update']);
    Route::delete('{manufacturer}', [ManufacturerController::class, 'destroy']);
});

Route::prefix('vehicle-brands')->group(function () {
    Route::get('/', [VehicleBrandController::class, 'index']);
    Route::post('/', [VehicleBrandController::class, 'store']);
    Route::put('{vehicleBrand}', [VehicleBrandController::class, 'update']);
    Route::delete('{vehicleBrand}', [VehicleBrandController::class, 'destroy']);
});

Route::prefix('vehicle-models')->group(function () {
    Route::get('/', [VehicleModelController::class, 'index']);
    Route::post('/', [VehicleModelController::class, 'store']);
    Route::put('{vehicleModel}', [VehicleModelController::class, 'update']);
    Route::delete('{vehicleModel}', [VehicleModelController::class, 'destroy']);
});

Route::apiResource('parts', PartsController::class)->except(['show']);


```
 i want now in the price, to provide orignal price, final price in bulk, price in details ...
 i have this in the db
         DB::table('part_reference_types')->upsert([
            ['id'=>1,'code'=>'OEM','label'=>'OEM Reference'],
            ['id'=>2,'code'=>'AFTERMARKET','label'=>'Aftermarket Reference'],
            ['id'=>3,'code'=>'SUPPLIER','label'=>'Supplier Reference'],
            ['id'=>4,'code'=>'EAN_UPC','label'=>'EAN/UPC'],
            ['id'=>5,'code'=>'OTHER','label'=>'Other'],
        ], ['id']);

        DB::table('price_tiers')->upsert([
            ['id'=>1,'code'=>'RETAIL','label'=>'Retail'],
            ['id'=>2,'code'=>'DEMI_GROS','label'=>'Demi-gros'],
            ['id'=>3,'code'=>'GROS','label'=>'Gros'],
            ['id'=>4,'code'=>'APPLIQUE','label'=>'AppliquÃ©'],
        ], ['id']);
        